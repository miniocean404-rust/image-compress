name: 上传 Artifact

description: 上传文件到本地或 Artifact，以便在作业之间快速共享文件

inputs:
  name:
    description: "Artifact 名称"
    default: "artifact"
  path:
    description: "描述上载内容的文件、目录或通配符模式"
    required: true
  try-local-cache:
    description: "尝试使用本地缓存保存 artifact"
    default: false
    required: false
    type: boolean
  mv-when-local:
    description: "移动文件而不是复制文件"
    default: false
    type: boolean
    required: false

outputs:
  runner-labels:
    description: "The runner labels that download artifact action should run on"
    value: ${{ steps.upload-local.outputs.runner-labels }}

runs:
  using: composite
  steps:
    - name: 上传归档
      uses: actions/upload-artifact@v4
      if: ${{ inputs.try-local-cache == 'false' }}
      with:
        name: ${{ inputs.name }}
        path: ${{ inputs.path }}
        if-no-files-found: error

    - name: 上传本地
      id: upload-local
      if: ${{ inputs.try-local-cache == 'true' }}
      shell: bash
      run: |
        set -e
        cache_dir=$HOME/.cache/runner
        if [[ ! -d "$cache_dir" ]]; then
          mkdir -p "$cache_dir"
        fi

        # 清除超过 3 小时的缓存目录
        find $cache_dir -type d -maxdepth 1 -mindepth 1 -cmin +180 | xargs rm -rf

        # 保存文件
        save_dir="$cache_dir/${{ github.repository_id }}-${{ github.sha }}-${{ inputs.name }}"
        rm -rf $save_dir
        mkdir $save_dir

        if [ "${{ inputs.mv-when-local }}" = "true" ]; then
          mv -f ${{ inputs.path }} $save_dir
          echo "mv -f ${{ inputs.path }} $save_dir"
        fi

        # TODO 输出机器名称作为 runner 标签
        # echo "runner_labels=\"$(uname -n)\"" >> "$GITHUB_OUTPUT"
        if [ -z "$RUNNER_LABELS" ]; then
          # RUNNER_LABELS 不存在
          echo "自托管 runner 必须存在 RUNNER_LABELS 变量"
          exit 1
        fi

        labelJson="[\"${RUNNER_LABELS//,/\",\"}\"]"
        echo "runner-labels=$labelJson" >> "$GITHUB_OUTPUT"
