name: 创建 tag 提交

description: 创建 tag 提交

inputs:
  ssh:
    description: "SSH 私钥"
    required: true
    default: ""

  version:
    description: "Tag 版本"
    required: true
    default: ""

# https://docs.github.com/zh/actions/creating-actions/creating-a-composite-action
# outputs:
#   random-number:
#     description: "Random number"
#     value: ${{ steps.random-number-generator.outputs.random-number }}

runs:
  using: composite
  steps:
    # - uses: actions/checkout@v4
    #   with:
    #     fetch-depth: 0
    #     ref: "dev"

    - uses: ./.github/actions/pnpm-cache

    - name: 安装 git-cliff 准备获取 changelog
      uses: taiki-e/install-action@v2
      with:
        tool: git-cliff@1.3.1

    - name: 安装 cargo-edit 修改 Cargo.toml
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-edit@0.12.2

    - name: "设置 jq 轻量级的命令行 JSON 处理工具"
      uses: dcarbone/install-jq-action@v2
      with:
        version: "1.7"
        force: true

    # 获取 determine-nightly-version 的 version 通过 ssh 生成 git tag 后，在后边使用
    - uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ inputs.ssh }}

    - name: 创建 Git Tag 提交
      shell: bash
      run: |
        code='
          set -eu

          # $(...): 这是命令替换的语法，表示执行括号内的命令并将输出结果作为字符串返回。
          # dirname 命令用于从路径中提取出目录部分。例：echo "$(dirname "$PWD")" 从 PWD 目录中获取它的父目录
          # ${BASH_SOURCE[0]} 是一个特殊变量，用于获取当前正在执行的脚本的路径（可能是相对路径）。
          # &> /dev/null: 将标准输出和标准错误输出都重定向到 /dev/null，即丢弃这些输出，不显示在终端上。
          SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

          git pull || true
          pnpm i

          CARGO_PROJECT_NAME="image-compress"
          # $1 shell 脚本第一个参数
          version="$1"
          # awk 常用于处理文本数据，通过指定不同的模式和操作来提取、转换和打印特定的字段或行。$2 就表示每行输入中的第二个字段
          # 获取项目版本号
          cargo_project_version="$(cargo tree -i -p $CARGO_PROJECT_NAME --depth 0 | awk '{print $2}')"

          # 输出即将执行的任务
          echo "发布 $version with $CARGO_PROJECT_NAME $cargo_project_version"

          # Update swc_core
          # (cd ./bindings && ../scripts/update-all-swc-crates.sh || true)

          # 更新 npm 版本
          # npm version: 这是 npm 的一个命令，用于修改项目的 package.json 文件中的版本号。
          # --no-git-tag-version: 这个标志阻止 npm 在更新版本后自动创建一个 Git 标签。如果你不想将版本更新与 Git 提交关联，可以使用这个选项
          # --allow-same-version: 这个标志允许将版本号设置为与当前版本相同。在某些情况下，可能需要在不更改版本号的情况下重新发布包，此选项有助于实现这一点。
          #(cd ./packages/core && npm version "$version" --no-git-tag-version --allow-same-version || true)
          #(cd ./packages/minifier && npm version "$version" --no-git-tag-version --allow-same-version || true)

          # cargo-edit 命令 更新 cargo 项目版本
          # cargo set-version 设置版本号
          # --bump patch: 自动增加版本号的 patch 部分，版本标签（major, minor, patch）例如，如果当前版本是 1.0.0，执行此命令后，版本会更新为 1.0.1
          # -p 指定 workspace 中的包，可以指定多个
          # (cd ./bindings && cargo set-version "$version" -p binding_compress_wasm)
          # (cd ./bindings && cargo set-version --bump patch -p swc_cli)

          # 提交并打 Tag 标签
          # git add -A
          # git commit -am "chore: 发布 \`$version\` 项目：\`$CARGO_PROJECT_NAME\` \`$cargo_project_version\`"
          # git tag -a -m "$CARGO_PROJECT_NAME $cargo_project_version" "v$version"

          # 更新 changelog 并打 Tag
          pnpm changelog
          # git add -A || true
          # git commit -m 'chore: 更新 changelog' || true

          # 推送
          # git push git@github.com:miniocean404-rust/image-compress.git --no-verify
          # git push git@github.com:miniocean404-rust/image-compress.git --no-verify --tags
        '

        bash -c "$code" ${{ inputs.version }}
