name: Single Docker build

description: Docker build for a single target

inputs:
  target:
    description: "构建的目标"
    required: true

  image:
    description: "Docker 镜像名称"
    required: true

  profile:
    description: "编译模式"
    default: "release"
    required: false

  options:
    description: "Docker 镜像选项"
    default: ""
    required: false

  pre:
    required: false
    default: ""
    description: "构建前执行的命令"

  post:
    required: false
    default: ""
    description: "构建后执行的命令"

  build:
    required: true
    default: ""
    description: "构建命令"

  working-directory:
    required: false
    default: "."
    description: "命令工作目录"

runs:
  using: composite
  steps:
    - name: Docker Build ${{ inputs.target }}
      shell: bash
      run: |
        code='
          set -e
          # 设置缓存
          if [ -x "$(command -v sccache)" ]; then
            export RUSTC_WRAPPER=sccache
            echo "enable sccache"
          fi

          ${{ inputs.pre }}
          rustup target add ${{ inputs.target }}

          # corepack > 0.24.1 will use native fetch
          # and native fetch not support HTTP_PROXY
          # https://github.com/nodejs/undici/issues/1650
          npm install -g corepack@0.24.1
          corepack enable

          # RUST_TARGET=${{ inputs.target }} 用于指定目标平台
          ${{ inputs.build }}

          ${{ inputs.post }}
        '


        # 获取 CARGO_HOME 的路径
        if [[ ! -n "$CARGO_HOME" ]]; then
          CARGO_HOME="$(dirname $(dirname $(which cargo)))"
        fi

        # --user 0:0 用于指定在容器内运行进程的用户和用户组。0:0 表示使用 root 用户和 root 用户组。
        # -v 代表挂载目（冒号左侧）录到容器（冒号右侧）指定目录下
        # -e 用于设置环境变量
        # -w 用于指定工作目录在容器哪个目录下
        # 使用 bash shell 执行代码 -c ：是一个选项，指示后面跟随的是要执行的命令字符串。
        docker run \
          --rm \
          --privileged \
          --user 0:0 \
          -v ${{ github.workspace }}/.cargo-cache/.cargo/git:/usr/local/cargo/git \
          -v ${{ github.workspace }}/.cargo-cache/.cargo/registry:/usr/local/cargo/registry \
          ${{ inputs.options }} \
          -e CI=1 \
          -e HOME=$HOME \
          -v $HOME/.cache:$HOME/.cache \
          -v ${{ github.workspace }}:/build \
          -w /build \
          -i \
          ${{ inputs.image }} \
          bash -c "$code"
