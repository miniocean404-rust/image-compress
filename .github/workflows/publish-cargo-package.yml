name: "构建 Cargo 包"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  MACOSX_DEPLOYMENT_TARGET: "10.13"
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_RELEASE_LTO: "fat"
  GIT_AUTHOR_NAME: "SWC Bot"
  GIT_AUTHOR_EMAIL: "bot@swc.rs"
  GIT_COMMITTER_NAME: "SWC Bot"
  GIT_COMMITTER_EMAIL: "bot@swc.rs"

permissions:
  contents: write
  id-token: write

on:
  # 工作流的执行依赖其他 workflow 的调用
  workflow_call:
    inputs:
      package:
        type: string
        required: true
      version:
        type: string
        required: true
      buildCli:
        type: boolean
        required: true
      skipBuild:
        type: boolean
        required: true
      skipPublishing:
        type: boolean
        required: true

jobs:
  check-if-build-required:
    name: 是否需要构建
    runs-on: ubuntu-latest
    outputs:
      need-build: ${{ steps.check.outputs.need-build }}
    steps:
      - uses: actions/checkout@v4
      # TODO: 检查是否存在 artifacts
      - id: check
        if: ${{ !inputs.skipBuild }}
        run: |
          echo "need-build=true" >> $GITHUB_OUTPUT

  create-git-tag-commit:
    name: 创建 Git Tag 提交日志
    runs-on: ubuntu-latest
    needs:
      - check-if-build-required
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: "master"

      - uses: ./.github/actions/setup-node

      - name: 安装 git-cliff 准备获取 changelog
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff@1.3.1

      - name: 安装 cargo-edit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-edit@0.12.2

      - name: "设置 jq 轻量级的命令行 JSON 处理工具"
        uses: dcarbone/install-jq-action@v2
        with:
          version: "1.7"
          force: true

    # 获取 determine-nightly-version 的 version 通过 ssh 生成 git tag 后，在后边使用
    #   - uses: webfactory/ssh-agent@v0.9.0
    #     if: needs.check-if-build-required.outputs.need-build == 'true' && !inputs.skipPublishing
    #     with:
    #       ssh-private-key: ${{ secrets.SWC_BOT_SSH }}

    #   - name: Create git tag commit
    #     if: needs.check-if-build-required.outputs.need-build == 'true' && !inputs.skipPublishing
    #     run: |
    #       ./scripts/publish.sh ${{ inputs.version }}

  build:
    if: needs.check-if-build-required.outputs.need-build == 'true'
    needs:
      - check-if-build-required
      - create-git-tag-commit
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            # cd ../ && cargo build -p image-compress-core --release --target x86_64-apple-darwin
            build: |
              cd ../ &&
              cd ./packages && pnpm build:node-dev --target x86_64-apple-darwin
              chmod +x ./dist/node
              strip -x ./dist/node/*.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              cd ../ &&
              cd ./packages && pnpm build:node-dev --target aarch64-apple-darwin
              chmod +x ./dist/node

          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: |
              export CARGO_PROFILE_RELEASE_LTO=false
              cd ../ &&
              cd ./packages && pnpm build:node-dev --target x86_64-pc-windows-msvc
              chmod +x ./dist/node

          - host: windows-latest
            target: i686-pc-windows-msvc
            build: |
              export CARGO_PROFILE_RELEASE_LTO=false
              cd ../ &&
              cd ./packages && pnpm build:node-dev --target i686-pc-windows-msvc
              chmod +x ./dist/node

          - host: windows-latest
            target: aarch64-pc-windows-msvc
            # 禁用'LTO'并增加'codegen-units'以避免在 GitHub Actions 上使用llvm 'OOM'。
            build: |
              export DISABLE_PLUGIN_E2E_TESTS=true
              export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=256
              export CARGO_PROFILE_RELEASE_LTO=false
              cd ../ &&
              cd ./packages && pnpm build:node-dev --target aarch64-pc-windows-msvc
              chmod +x ./dist/node

          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            # unset CC_x86_64_unknown_linux_gnu && unset CC && RUSTFLAGS='-C target-feature=+sse2' &&
            # rm -rf ../../bindings/target/target/x86_64-unknown-linux-gnu/release/.cargo-lock &&
            build: >-
              set -e &&
              cd ../ &&
              cd ./packages && pnpm build:node-dev --target x86_64-unknown-linux-gnu
              chmod +x ./dist/node

          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            # musl 构建太慢了，让我们关闭 LTO
            # RUSTFLAGS='-C target-feature=+sse2' cargo build --manifest-path ../../bindings/swc_cli/Cargo.toml --release --features plugin --target x86_64-unknown-linux-musl &&
            # rm -rf target/release/.cargo-lock  &&
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: >-
              set -e &&
              export CARGO_PROFILE_RELEASE_LTO=false &&
              cd ../ &&
              cd ./packages && RUSTFLAGS='-C target-feature=+sse2 -C target-feature=-crt-static' pnpm build:node-dev --target x86_64-unknown-linux-musl
              chmod +x ./dist/node

          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            #  RUSTFLAGS='' cargo build --manifest-path ../../bindings/swc_cli/Cargo.toml --release --features plugin --target aarch64-unknown-linux-gnu &&
            build: >-
              set -e &&
              export JEMALLOC_SYS_WITH_LG_PAGE=16 &&
              rustup target add aarch64-unknown-linux-gnu &&
              cd ../ &&
              cd ./packages &&
              export CC_aarch64_unknown_linux_gnu=/usr/aarch64-unknown-linux-gnu/bin/aarch64-unknown-linux-gnu-gcc && pnpm build:node-dev --target aarch64-unknown-linux-gnu
              chmod +x ./dist/node
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            build: |
              export DISABLE_PLUGIN_E2E_TESTS=true
              cd ../ &&
              cd ./packages && pnpm build:node-dev --target armv7-unknown-linux-gnueabihf --no-default-features --features swc_v1 --use-napi-cross
              chmod +x ./dist/node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            downloadTarget: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            # rustup toolchain install $(cat ../../rust-toolchain) &&
            # RUSTFLAGS='-C target-feature=+crt-static -C link-arg=-lgcc' cargo build --manifest-path ../../bindings/swc_cli/Cargo.toml --release --features plugin --target aarch64-unknown-linux-musl &&
            # rm -rf target/release/.cargo-lock &&
            build: >-
              export JEMALLOC_SYS_WITH_LG_PAGE=16 &&
              rustup target add aarch64-unknown-linux-musl &&
              cd ../ &&
              cd ./packages && env RUSTFLAGS='-C target-feature=-crt-static' pnpm build:node-dev --target=aarch64-unknown-linux-musl
              chmod +x ./dist/node

    name: "构建 ${{ inputs.package }} - ${{ matrix.settings.target }} - node@20"
    runs-on: ${{ matrix.settings.host }}
    steps:
      # - name: 展示 packages
      #   working-directory: ./packages
      #   run: ls -R ../../
      #   shell: bash

      - uses: actions/checkout@v4
        # 引用 git tag 版本
        # with:
        #   ref: "v${{ inputs.version }}"

      - name: 开启 Node Corepack
        shell: bash
        run: corepack enable

      - name: Setup node x64
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          architecture: x64

      - name: 获取 rust toolchain
        id: toolchain
        shell: bash
        run: echo "version=$(cat ./rust-toolchain)" >> "$GITHUB_OUTPUT"

      - name: 安装 rust toolchain
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          targets: ${{ matrix.settings.target }}
          # toolchain: ${{ steps.toolchain.outputs.version }}

      # 在 Github Actions 工作流程中使用 Zig 编译器
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.12.0

      - name: 缓存 cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.settings.target }}-node@20-cargo-registry-trimmed

      - name: 缓存 cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ matrix.settings.target }}-node@20-cargo-index-trimmed
        if: ${{ matrix.settings.docker }}

      - name: 设置 toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash

      # 使用 x64 Node.js 安装依赖，因 为 ia32 版本将会失败，会提示 "错误:无法分配足够的内存"。
      - name: 设置 install target x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: pnpm config set supportedArchitectures.cpu "ia32"
        shell: bash

      - name: 安装依赖
        # 再次运行 corepack enable
        # 因为在 Windows pnpm 会使用 cmd 来运行 pnpm install。
        shell: bash
        run: |
          corepack enable
          pnpm install
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          echo '/usr/local/cargo/bin' >> $GITHUB_PATH

      - name: 设置 node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 20
          architecture: x86

      - name: 在 docker 中构建
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: -v ${{ env.HOME }}/.cargo/git:/root/.cargo/git -v ${{ env.HOME }}/.cargo/registry:/root/.cargo/registry -v ${{ github.workspace }}:/build -w /build
          run: >-
            cd ./packages &&
            npm install -f -g pnpm@9.6.0 &&
            corepack enable &&
            npm i -g wasm-pack &&
            ${{ matrix.settings.build }}

      - name: 构建
        working-directory: ./packages
        if: ${{ !matrix.settings.docker }}
        run: ${{ matrix.settings.build }}
        shell: bash

      - name: 上传 artifact
        uses: actions/upload-artifact@v4
        with:
          # 上传归档的名称
          name: bindings-${{ matrix.settings.target }}
          # 归档的文件路径 xx* 代表以 xx 开头的文件
          path: |
            packages/dist/node/image-compress*
          if-no-files-found: error

  publish:
    needs: build
    name: 发布 ${{ inputs.version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        # with:
        # ref: "v${{ inputs.version }}"

      - uses: ./.github/actions/setup-node

      - name: 设置 npm 发行版标签
        run: |
          if [[ '${{ inputs.version }}' != *"nightly"* ]]; then
            echo "NPM_TAG=latest" >> $GITHUB_ENV
          else
            echo "NPM_TAG=nightly" >> $GITHUB_ENV
          fi

      - name: 安装依赖
        run: corepack enable && pnpm install

      - name: 下载所有 artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./packages/artifacts

      - name: 展示 artifacts 二进制文件 及 .node 文件
        run: ls -R ./packages/artifacts
        shell: bash

      - name: 移动 artifacts 二进制文件 (非 .node 文件)
        shell: bash
        working-directory: .
        run: |
          chmod +x ./.github/scripts/cli_artifacts_rename.sh
          ./.github/scripts/cli_artifacts_rename.sh

      # - name: 设置 npm 包依赖
      #   shell: bash
      #   run: |
      #     node ./scripts/update_fallback_dependencies.js

      # - name: 发布 npm 包及长传 .node 文件到 github release
      # npm config set provenance true 命令设置发布 npm 包时候自动发布 github release https://docs.npmjs.com/generating-provenance-statements
      #   if: ${{ !inputs.skipPublishing }}
      #   run: |
      #     npm config set provenance true
      #     echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      #     echo "npmAlwaysAuth:true\n npmAuthToken: '$NPM_TOKEN'\n" >> ~/.yarnrc
      #     (cd packages/core && yarn workspaces foreach -Rt npm publish --tolerate-republish --tag $NPM_TAG)
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      # - name: 上传二进制到 gh release
      #   if: ${{ !inputs.skipPublishing }}
      #   shell: bash
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     RELEASE_VERSION: "v${{ inputs.version }}"
      #   run: |
      #     chmod +x ./.github/scripts/cli_upload_gh_release.sh
      #     ./.github/scripts/cli_upload_gh_release.sh
      #       - name: 开始发布

      - name: 通过 action 上传二进制到 gh release
        uses: softprops/action-gh-release@v1
        # 403 错误 设置 Action 权限 github -> setting -> actiong -> general -> Workflow permissions
        with:
          generate_release_notes: true
          tag_name: ${{ github.repository }}
          body: ${{ github.event.head_commit.message }}
          token: ${{ github.token }}
          files: |
            ./packages/artifacts_rename/*
