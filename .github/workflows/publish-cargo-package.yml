name: "构建 Cargo 包"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DEBUG: napi:*
  APP_NAME: swc
  MACOSX_DEPLOYMENT_TARGET: "10.13"
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_RELEASE_LTO: "fat"
  CI: "1"
  DISABLE_PLUGIN_E2E_TESTS: true
  # https://github.com/actions/setup-node/issues/899#issuecomment-1819151595
  SKIP_YARN_COREPACK_CHECK: 1
  GIT_AUTHOR_NAME: "SWC Bot"
  GIT_AUTHOR_EMAIL: "bot@swc.rs"
  GIT_COMMITTER_NAME: "SWC Bot"
  GIT_COMMITTER_EMAIL: "bot@swc.rs"

permissions:
  contents: write
  id-token: write

on:
  push:
    branches: [master]
  # 工作流的执行依赖其他 workflow 的调用
  workflow_call:
    inputs:
      package:
        type: string
        required: true
      version:
        type: string
        required: true
      buildCli:
        type: boolean
        required: true
      skipBuild:
        type: boolean
        required: true
      skipPublishing:
        type: boolean
        required: true

jobs:
  check-if-build-required:
    name: 检查是否必须构建
    runs-on: ubuntu-latest
    outputs:
      need-build: ${{ steps.check.outputs.need-build }}
    steps:
      - uses: actions/checkout@v4
      # TODO: 检查是否存在 artifacts
      - id: check
        if: ${{ !inputs.skipBuild }}
        run: |
          echo "need-build=true" >> $GITHUB_OUTPUT

  create-git-tag-commit:
    name: 创建 Git Tag 提交
    runs-on: ubuntu-latest
    needs:
      - check-if-build-required
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: "master"

      - uses: ./.github/actions/setup-node

      - name: 安装 git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff@1.3.1

      - name: 安装 cargo-edit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-edit@0.12.2

      - name: "设置 jq 轻量级的命令行 JSON 处理工具"
        uses: dcarbone/install-jq-action@v2
        with:
          version: "1.7"
          force: true

    #   - uses: webfactory/ssh-agent@v0.9.0
    #     if: needs.check-if-build-required.outputs.need-build == 'true' && !inputs.skipPublishing
    #     with:
    #       ssh-private-key: ${{ secrets.SWC_BOT_SSH }}

    #   - name: Create git tag commit
    #     if: needs.check-if-build-required.outputs.need-build == 'true' && !inputs.skipPublishing
    #     run: |
    #       ./scripts/publish.sh ${{ inputs.version }}

  build:
    if: needs.check-if-build-required.outputs.need-build == 'true'
    needs:
      - check-if-build-required
      - create-git-tag-commit
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              ls -R ../../
              cd ../../packages
              yarn build:node-dev
              cargo build --manifest-path ../../crates/core/Cargo.toml --release --target x86_64-apple-darwin
              ls -R ../../

          # cargo build --manifest-path ../../bindings/swc_cli/Cargo.toml --release --features plugin --target x86_64-apple-darwin
          # cp ../../bindings/target/x86_64-apple-darwin/release/swc .
          # chmod +x ./swc
          # yarn build --target x86_64-apple-darwin
          # strip -x *.node

          # - host: macos-latest
          #   target: aarch64-apple-darwin
          #   build: |
          #     sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
          #     export CC=$(xcrun -f clang);
          #     export CXX=$(xcrun -f clang++);
          #     SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
          #     export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
          #     cargo build --manifest-path ../../bindings/swc_cli/Cargo.toml --release --features plugin --target aarch64-apple-darwin
          #     cp ../../bindings/target/aarch64-apple-darwin/release/swc .
          #     chmod +x ./swc
          #     yarn build --target aarch64-apple-darwin
          # - host: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   build: |
          #     export CARGO_PROFILE_RELEASE_LTO=false
          #     yarn build --target x86_64-pc-windows-msvc
          #     cargo build --manifest-path ../../bindings/swc_cli/Cargo.toml --release --features plugin --target x86_64-pc-windows-msvc
          #     cp ../../bindings/target/x86_64-pc-windows-msvc/release/swc .
          # - host: windows-latest
          #   target: i686-pc-windows-msvc
          #   # use npm to run test, because of corepack link the yarn with x64 Node.js
          #   build: |
          #     export CARGO_PROFILE_RELEASE_LTO=false
          #     cargo build --manifest-path ../../bindings/swc_cli/Cargo.toml --release --target i686-pc-windows-msvc
          #     cp ../../bindings/target/i686-pc-windows-msvc/release/swc .
          #     yarn build --target i686-pc-windows-msvc --no-default-features --features swc_v1
          #     npm run test
          # - host: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   # Disable `LTO` and increase `codegen-units` to avoid llvm `OOM` on GitHub Actions.
          #   build: |
          #     export DISABLE_PLUGIN_E2E_TESTS=true
          #     export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=256
          #     export CARGO_PROFILE_RELEASE_LTO=false
          #     cargo build --manifest-path ../../bindings/swc_cli/Cargo.toml --release --target aarch64-pc-windows-msvc
          #     cp ../../bindings/target/aarch64-pc-windows-msvc/release/swc.exe .
          #     yarn build --target aarch64-pc-windows-msvc --no-default-features --features swc_v1
          # - host: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
          #   build: >-
          #     set -e &&
          #     unset CC_x86_64_unknown_linux_gnu && unset CC && RUSTFLAGS='-C target-feature=+sse2' cargo build --manifest-path ../../bindings/swc_cli/Cargo.toml --release --features plugin --target x86_64-unknown-linux-gnu &&
          #     rm -rf ../../bindings/target/target/x86_64-unknown-linux-gnu/release/.cargo-lock &&
          #     cp ../../bindings/target/x86_64-unknown-linux-gnu/release/swc . && chmod +x ./swc &&
          #     yarn build --target x86_64-unknown-linux-gnu
          # - host: ubuntu-latest
          #   target: x86_64-unknown-linux-musl
          #   # musl build is slow, let's disable the LTO
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          #   build: >-
          #     set -e &&
          #     export CARGO_PROFILE_RELEASE_LTO=false &&
          #     RUSTFLAGS='-C target-feature=+sse2' cargo build --manifest-path ../../bindings/swc_cli/Cargo.toml --release --features plugin --target x86_64-unknown-linux-musl &&
          #     rm -rf target/release/.cargo-lock &&
          #     cp ../../bindings/target/x86_64-unknown-linux-musl/release/swc . && chmod +x ./swc &&
          #     RUSTFLAGS='-C target-feature=+sse2 -C target-feature=-crt-static' yarn build --target x86_64-unknown-linux-musl
          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
          #   build: >-
          #     set -e &&
          #     export JEMALLOC_SYS_WITH_LG_PAGE=16 &&
          #     rustup target add aarch64-unknown-linux-gnu &&
          #     RUSTFLAGS='' cargo build --manifest-path ../../bindings/swc_cli/Cargo.toml --release --features plugin --target aarch64-unknown-linux-gnu &&
          #     cp ../../bindings/target/aarch64-unknown-linux-gnu/release/swc . && chmod +x ./swc &&
          #     export CC_aarch64_unknown_linux_gnu=/usr/aarch64-unknown-linux-gnu/bin/aarch64-unknown-linux-gnu-gcc &&
          #     yarn build --target aarch64-unknown-linux-gnu
          # - host: ubuntu-latest
          #   target: armv7-unknown-linux-gnueabihf
          #   build: |
          #     export DISABLE_PLUGIN_E2E_TESTS=true
          #     yarn napi build --bin swc --release --target armv7-unknown-linux-gnueabihf --manifest-path ../../bindings/swc_cli/Cargo.toml -x --target-dir ../release -o .
          #     chmod +x ./swc
          #     yarn build --target armv7-unknown-linux-gnueabihf --no-default-features --features swc_v1 --use-napi-cross
          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   downloadTarget: aarch64-unknown-linux-musl
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          #   build: >-
          #     export JEMALLOC_SYS_WITH_LG_PAGE=16 &&
          #     rustup toolchain install $(cat ../../rust-toolchain) &&
          #     rustup target add aarch64-unknown-linux-musl &&
          #     RUSTFLAGS='-C target-feature=+crt-static -C link-arg=-lgcc' cargo build --manifest-path ../../bindings/swc_cli/Cargo.toml --release --features plugin --target aarch64-unknown-linux-musl &&
          #     rm -rf target/release/.cargo-lock &&
          #     cp ../../bindings/target/aarch64-unknown-linux-musl/release/swc . && chmod +x ./swc &&
          #     env RUSTFLAGS='-C target-feature=-crt-static' yarn build --target=aarch64-unknown-linux-musl

    name: "构建 ${{ inputs.package }} - ${{ matrix.settings.target }} - node@20"
    runs-on: ${{ matrix.settings.host }}
    steps:
      - name: 展示 packages
        run: ls -R ../../
        shell: bash
      - uses: actions/checkout@v4
        # with:
        #   ref: "v${{ inputs.version }}"

      - name: Node Corepack
        shell: bash
        run: corepack enable
      - name: Setup node x64
        uses: actions/setup-node@v4
        with:
          node-version: 20
          # cache: yarn
          architecture: x64

      - name: 输出 rust toolchain
        id: toolchain
        shell: bash
        run: echo "version=$(cat ./rust-toolchain)" >> "$GITHUB_OUTPUT"

      - name: 安装 rust toolchain
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          targets: ${{ matrix.settings.target }}
          toolchain: ${{ steps.toolchain.outputs.version }}

      # 在 Github Actions 工作流程中使用 Zig 编译器
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.12.0
      - name: 缓存 cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.settings.target }}-node@20-cargo-registry-trimmed
      - name: 缓存 cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ matrix.settings.target }}-node@20-cargo-index-trimmed
        if: ${{ matrix.settings.docker }}
      - name: 设置 toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      # 使用 x64 Node.js 安装依赖，因 为 ia32 版本将会失败，会提示 "错误:无法分配足够的内存"。
      - name: 设置 install target x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: 安装依赖
        # 再次运行 corepack enable
        # 因为在 Windows 上，yarn 会使用 cmd 来运行 yarn install。
        shell: bash
        run: |
          corepack enable
          yarn install
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          echo '/usr/local/cargo/bin' >> $GITHUB_PATH
      - name: 设置 node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 20
          architecture: x86
      - name: 在 docker 中构建
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: -v ${{ env.HOME }}/.cargo/git:/root/.cargo/git -v ${{ env.HOME }}/.cargo/registry:/root/.cargo/registry -v ${{ github.workspace }}:/build -w /build
          run: >-
            cd ./packages &&
            npm install -f -g yarn@1.22 &&
            corepack enable &&
            npm i -g wasm-pack &&
            ${{ matrix.settings.build }}
      - name: 构建
        working-directory: ./packages
        if: ${{ !matrix.settings.docker }}
        run: ${{ matrix.settings.build }}
        shell: bash
      - name: 上传 artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            packages/core/dist*
          if-no-files-found: error
