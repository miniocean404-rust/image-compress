name: "构建 Cargo 包"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  MACOSX_DEPLOYMENT_TARGET: "10.13"
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_RELEASE_LTO: "fat"
  # ssh 私钥生成：ssh-keygen -t rsa -b 4096 -C "bot@image-compress.rs" 然后输入文件名
  GIT_AUTHOR_NAME: "Mini Ocean 404 Bot"
  GIT_AUTHOR_EMAIL: "bot@image-compress.rs"
  GIT_COMMITTER_NAME: "Mini Ocean 404 Bot"
  GIT_COMMITTER_EMAIL: "bot@image-compress.rs"

permissions:
  contents: write
  id-token: write

on:
  # 工作流的执行依赖其他 workflow 的调用
  workflow_call:
    inputs:
      package:
        description: "发布的包名"
        type: string
        required: true

      version:
        description: "版本号"
        type: string
        required: true

      skipBuild:
        description: "是否跳过构建"
        type: boolean
        required: true

      skipPublishing:
        description: "是否跳过发布"
        type: boolean
        required: true

jobs:
  check-if-build-required:
    name: 是否需要构建
    runs-on: ubuntu-latest
    outputs:
      need-build: ${{ steps.check.outputs.need-build }}
    steps:
      - uses: actions/checkout@v4
      # TODO: 检查是否存在 artifacts
      - id: check
        if: ${{ !inputs.skipBuild }}
        run: |
          echo "need-build=true" >> $GITHUB_OUTPUT

  build-node:
    if: needs.check-if-build-required.outputs.need-build == 'true'
    needs:
      - check-if-build-required
      # - create-git-tag-commit
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin

          - host: macos-latest
            target: aarch64-apple-darwin
            pre: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";

          - host: windows-latest
            target: x86_64-pc-windows-msvc

          - host: windows-latest
            target: i686-pc-windows-msvc

          - host: windows-latest
            target: aarch64-pc-windows-msvc

          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian

          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine

          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64

          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine

          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf -y

    name: "构建 Node Native ${{ inputs.package }} - ${{ matrix.settings.target }} - node@20"
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
        # 引用 git tag 版本
        # with:
        #   ref: "v${{ inputs.version }}"
      - name: 构建 Napi
        uses: ./.github/actions/rust-build
        with:
          isNeedNode: true
          name: bindings-${{ matrix.settings.target }}-node
          path: |
            ./packages/image-compress/image-compress*
            ./packages/explore/explore*
          target: ${{ matrix.settings.target }}
          image: ${{ matrix.settings.docker }}
          pre: ${{ matrix.settings.setup }}
          build: |
            ${{ matrix.settings.pre }}
            pnpm build:node --target ${{ matrix.settings.target }}
            ${{ matrix.settings.post }}

            if [[ '${{ matrix.settings.target }}' == "x86_64-apple-darwin" ]]; then
              strip -x ./packages/image-compress/*.node
              strip -x ./packages/explore/*.node
            fi

  build-wasm:
    runs-on: ubuntu-latest
    needs:
      - check-if-build-required
    name: "构建 Wasm ${{ inputs.package }} ${{ matrix.settings.target }}"
    strategy:
      fail-fast: false
      matrix:
        settings:
          - target: nodejs

          - target: web

          - target: bundler

          - target: deno
    steps:
      - uses: actions/checkout@v4

      - name: 构建 WASM
        uses: ./.github/actions/rust-build
        with:
          isNeedNode: true
          name: bindings-${{ matrix.settings.target }}-wasm
          path: |
            ./bindings/binding_compress_wasm/pkg/*.wasm
          build: |
            # 默认打包在 pkg 目录下
            # 文档：https://rustwasm.github.io/docs/wasm-pack/commands/build.html
            wasm-pack build ./bindings/binding_compress_wasm --out-name image-compress-${{ matrix.settings.target }} --release --target ${{ matrix.settings.target }} --scope giegie
            # sed -i -e 's/"name": "@giegie\/binding_compress_wasm"/"name": "@giegie\\/image-compress-wasm-web"/g' pkg/package.json

  publish:
    needs:
      - build-node
      - build-wasm
    name: 发布 ${{ inputs.version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        # with:
        # ref: "v${{ inputs.version }}"

      - uses: ./.github/actions/pnpm-cache

      - name: 设置 npm 发行版标签
        run: |
          if [[ '${{ inputs.version }}' != *"nightly"* ]]; then
            echo "NPM_TAG=latest" >> $GITHUB_ENV
          else
            echo "NPM_TAG=nightly" >> $GITHUB_ENV
          fi

      - name: 安装依赖
        run: pnpm i

      - name: 下载所有 artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./packages/artifacts

      - name: 展示 artifacts 文件
        run: ls -R ./packages/artifacts
        shell: bash

      - name: 重命名 artifacts 文件
        run: |
          cp -r -v ./packages/artifacts/**/**/*.node ./packages/artifacts
          cp -r -v ./packages/artifacts/**/*.wasm ./packages/artifacts
        shell: bash

      - name: Napi 归档 image-compress
        working-directory: ./packages/image-compress
        run: |
          # tar -czvf ./packages/artifacts.tar.gz ./packages/artifacts
          pnpm run artifacts

      - name: Napi 归档 image-compress
        working-directory: ./packages/explore
        run: |
          pnpm run artifacts

      - name: 展示 npm 归档
        working-directory: ./packages/image-compress
        shell: bash
        run: ls -R ./npm

      - name: 展示 npm 归档
        working-directory: ./packages/explore
        shell: bash
        run: ls -R ./npm

      - name: 发布 npm 包及长传 .node 文件到 github release
        if: ${{ !inputs.skipPublishing }}
        run: |
          # npm config set provenance true 命令设置发布 npm 包时候自动发布 GitHub Release: https://docs.npmjs.com/generating-provenance-statements
          npm config set provenance false
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          echo "npmAlwaysAuth:true\n npmAuthToken: '$NPM_TOKEN'\n" >> ~/.npmrc
          pnpm run prepublishOnly
          # (cd packages/image-compress && yarn workspaces foreach -Rt npm publish --tolerate-republish --tag $NPM_TAG)
        env:
          GITHUB_TOKEN: ${{ github.token }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 通过 Action 上传二进制到 gh release
        uses: softprops/action-gh-release@v2
        # 403 错误 设置 Action 权限 github -> setting -> actiong -> general -> Workflow permissions
        with:
          generate_release_notes: true
          tag_name: ${{ github.repository }}
          body: ${{ github.event.head_commit.message }}
          token: ${{ github.token }}
          files: |
            ./packages/artifacts/*
