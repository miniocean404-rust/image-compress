name: "发布"

env:
  CI: 1
  # GitHub 上默认为 7 GiB，设置为 6 GiB
  # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
  NODE_OPTIONS: --max-old-space-size=6144
  GIT_AUTHOR_NAME: "Mini Ocean 404 Bot"
  GIT_AUTHOR_EMAIL: "bot@image-compress.rs"
  GIT_COMMITTER_NAME: "Mini Ocean 404 Bot"
  GIT_COMMITTER_EMAIL: "bot@image-compress.rs"
  # https://github.com/actions/setup-node/issues/899#issuecomment-1819151595
  SKIP_YARN_COREPACK_CHECK: 1

on:
  push:
    branches: [ master ]
  # workflow_dispatch 允许手动触发工作流的运行
  workflow_dispatch:
    inputs:
      version:
        description: "发布的版本"
        required: true
        type: string
        default: 1.0.0
      skipBuild:
        description: "是否跳过构建"
        required: false
        type: boolean
        default: false
      onlyNightly:
        description: "是否发布每日版本"
        required: false
        type: boolean
        default: false

# 并发控制是指在多任务或多进程环境中，协调和管理多个任务或进程同时执行的方式，以避免冲突、确保资源的合理利用和系统的稳定性。在 GitHub Actions 中，并发控制用于限制同时运行的工作流或作业的数量，以及处理它们之间的依赖关系和执行顺序。通过并发控制，可以防止过多的任务同时竞争资源，避免出现混乱或错误，
# 例如，如果多个工作流同时尝试修改同一个文件或使用相同的资源，可能会导致数据不一致或其他问题。并发控制可以确保在给定的条件下，只有适当数量的任务在同一时间运行，或者按照特定的顺序执行任务。
concurrency:
  # ${{ github.workflow }} 是一个 GitHub Actions 中的上下文变量，它的值表示当前工作流的名称，就是 workflow 中配置文件的 name 字段的值。
  # 定义了一个并发组，组名使用了 ${{ github.workflow }} 这个表达式。这意味着具有相同工作流名称的作业或工作流将被分组在一起进行并发控制
  group: ${{ github.workflow }}
  # 表示如果在同一个并发组中，当新的作业或工作流被排队时，如果已经有另一个使用相同并发组的作业或工作流正在进行中，那么正在进行的作业或工作流将被取消。
  cancel-in-progress: true

# bump 代码中含义：提升、增加或更改版本号

#      - uses: actions-rs/toolchain@v1
#        with:
#          # 在安装工具链之前执行 rustup set profile {value}，例如。minimal
#          # https://skyao.io/learning-rust/docs/build/rustup/rustup-book/
#          # 安装新的 Rust 工具链时可以选择下载的组件组设置为 minimal 以获得一个可工作的编译器（rustc、rust-std和cargo），这样可以减少下载的组件数量，加快下载速度
#          profile: minimal

jobs:
  determine-version:
    name: "获取发布版本"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.determine-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-node
      - name: 通过 BOT 获取发布版本
        id: determine-version
        run: |
          npm i -g ts-node
          ts-node .github/bot/src/nightly-version.ts ${{ github.event.inputs.version }} >> $GITHUB_OUTPUT

  publish-cargo-stable:
    needs: determine-version
    name: "发布 ${{ needs.determine-version.outputs.version }}"
    secrets: inherit
    uses: ./.github/workflows/test1.yml
    with:
      package: "core"
      version: ${{ needs.determine-version.outputs.version }}
      buildCli: true
      skipBuild: ${{ inputs.skipBuild || false }}
      skipPublishing: false
