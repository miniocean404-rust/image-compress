name: Rust

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '.idea/**'
      - '.gitattributes'
      - '.github/**.json'
      - '.gitignore'
      - '.gitmodules'
      - '**.md'
      - '**/*.txt'
      - '**/*.png'
      - '**/*.jpg'
      - 'LICENSE'
      - 'NOTICE'
      - image/**
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '.idea/**'
      - '.gitattributes'
      - '.github/**.json'
      - '.gitignore'
      - '.gitmodules'
      - '**.md'
      - '**/*.txt'
      - '**/*.png'
      - '**/*.jpg'
      - 'LICENSE'
      - 'NOTICE'
      - image/**

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: ${{ matrix.os.target }} 准备构建
    runs-on: ${{ matrix.os.platform }}
    strategy:
      fail-fast: false
      matrix:
        os:
         - platform: macos-latest
           target: x86_64-apple-darwin
           build: |
              cargo build --verbose --release
              cp ./target/release/image-compress ./tag

         - platform: macos-latest
           target: aarch64-apple-darwin
           build: |
            cargo build --verbose --release
            cp ./target/release/image-compress ./tag


         - platform: windows-latest
           target: x86_64-pc-windows-msvc
           build: |
              cargo build --verbose --release
              cp ./target/release/image-compress ./tag

         - platform: windows-latest
           target: i686-pc-windows-msvc
           build: |
              cargo build --verbose --release
              cp ./target/release/image-compress ./tag

         - platform: windows-latest
           target: aarch64-pc-windows-msvc
           build: |
              cargo build --verbose --release
              cp ./target/release/image-compress ./tag


         - platform: ubuntu-latest
           target: x86_64-unknown-linux-gnu
           build: |
              cargo build --verbose --release
              cp ./target/release/image-compress ./tag

         - platform: ubuntu-latest
           target: x86_64-unknown-linux-musl
           build: |
              cargo build --verbose --release
              cp ./target/release/image-compress ./tag


         - platform: ubuntu-latest
           target: aarch64-unknown-linux-gnu
           build: |
              cargo build --verbose --release
              cp ./target/release/image-compress ./tag

         - platform: ubuntu-latest
           target: armv7-unknown-linux-gnueabihf
           build: |
              cargo build --verbose --release
              cp ./target/release/image-compress ./tag

         - platform: ubuntu-latest
           target: aarch64-unknown-linux-musl
           build: |
              cargo build --verbose --release
              cp ./target/release/image-compress ./tag

#      - name: Run tests
#        run: cargo test --verbose --release
    steps:
      - uses: actions/checkout@v4
      - name: 签出文件
        shell: bash
        run: echo "开始构建"

      - name: 安装 rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.os.target }}

      - name: 缓存 cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.os.target }}-cargo-registry-trimmed

      - name: 缓存 cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ matrix.os.target }}-cargo-index-trimmed

      - name: 运行打包 并 归并到一个目录中再准备上传
        shell: bash
        run: |
          mkdir tag
          ${{matrix.os.build}}
          cd ./target/release/
          pwd
          ls -R

      - name: 分享 Release 包给其他 Job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os.target }}
          path: |
            tag/*
          # 如果没有文件就错误提示
          if-no-files-found: error

  publish:
    name: 上传到 Release 进行版本发布
    # 等待某个工作完成后
    needs: build
    runs-on: ubuntu-latest
    steps:
      # 检出文件以便使用 script 中的文件
      - uses: actions/checkout@v4

      - name: 设置 Release 名字
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      # 接收上传的东西
      - name: 获取分享的安装包
        uses: actions/download-artifact@v4
        with:
          # name 为 actions/upload-artifact@v4 配置的 name 他是共享的上传的文件夹名称
          # name: "xxx"
          path: prod/package

      - name: 展示下载的文件列表
        shell: bash
        run: |
          pwd
          ls -R
        working-directory: prod/package

      - name: 重命名并移动二进制文件
        shell: bash
        run: |
            chmod +x ./script/ci-rename-file.sh
            ./script/ci-rename-file.sh
            ls -R ./prod_cli

      - name: 开始发布
        uses: softprops/action-gh-release@v1
        # 403 错误 设置 Action 权限 github -> setting -> actiong -> general -> Workflow permissions
        with:
          generate_release_notes: true
          tag_name: ${{ github.repository }}
          body: ${{ github.event.head_commit.message }}
          token: ${{ github.token }}
          files: |
           prod_cli/*
