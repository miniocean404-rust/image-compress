# 其他参考文：
# https://github.com/biomejs/biome/blob/main/.github/workflows/release_cli.yml
# https://github.com/orhun/git-cliff/blob/main/.github/workflows/cd.yml
# https://github.com/skyra-project/ai/actions/runs/5556591465/workflow?pr=131
# https://github.com/napi-rs/node-rs/actions/runs/5606629914/workflow

name: "构建 Cargo 包"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  MACOSX_DEPLOYMENT_TARGET: "10.13"
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_RELEASE_LTO: "fat"
  GIT_AUTHOR_NAME: "SWC Bot"
  GIT_AUTHOR_EMAIL: "bot@swc.rs"
  GIT_COMMITTER_NAME: "SWC Bot"
  GIT_COMMITTER_EMAIL: "bot@swc.rs"

permissions:
  contents: write
  id-token: write

on:
  # 工作流的执行依赖其他 workflow 的调用
  workflow_call:
    inputs:
      package:
        type: string
        required: true
      version:
        type: string
        required: true
      buildCli:
        type: boolean
        required: true
      skipBuild:
        type: boolean
        required: true
      skipPublishing:
        type: boolean
        required: true
      profile:
        type: string
        required: false
        default: release

jobs:
  check-if-build-required:
    name: 是否需要构建
    runs-on: ubuntu-latest
    outputs:
      need-build: ${{ steps.check.outputs.need-build }}
    steps:
      - uses: actions/checkout@v4
      # TODO: 检查是否存在 artifacts
      - id: check
        if: ${{ !inputs.skipBuild }}
        run: |
          echo "need-build=true" >> $GITHUB_OUTPUT

  create-git-tag-commit:
    name: 创建 Git Tag 提交日志
    runs-on: ubuntu-latest
    needs:
      - check-if-build-required
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: "master"

      - uses: ./.github/actions/setup-node

      - name: 安装 git-cliff 准备获取 changelog
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff@1.3.1

      - name: 安装 cargo-edit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-edit@0.12.2

      - name: "设置 jq 轻量级的命令行 JSON 处理工具"
        uses: dcarbone/install-jq-action@v2
        with:
          version: "1.7"
          force: true

    # 获取 determine-nightly-version 的 version 通过 ssh 生成 git tag 后，在后边使用
    #   - uses: webfactory/ssh-agent@v0.9.0
    #     if: needs.check-if-build-required.outputs.need-build == 'true' && !inputs.skipPublishing
    #     with:
    #       ssh-private-key: ${{ secrets.SWC_BOT_SSH }}

    #   - name: Create git tag commit
    #     if: needs.check-if-build-required.outputs.need-build == 'true' && !inputs.skipPublishing
    #     run: |
    #       ./scripts/publish.sh ${{ inputs.version }}

  build:
    if: needs.check-if-build-required.outputs.need-build == 'true'
    needs:
      - check-if-build-required
      - create-git-tag-commit
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin

          - host: macos-latest
            target: aarch64-apple-darwin

          - host: windows-latest
            target: x86_64-pc-windows-msvc

          - host: windows-latest
            target: i686-pc-windows-msvc

          - host: windows-latest
            target: aarch64-pc-windows-msvc

          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf

          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu

          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl

    name: "构建 ${{ inputs.package }} - ${{ matrix.settings.target }} - node@20"
    runs-on: ${{ matrix.settings.host }}
    steps:
      # - name: 展示 packages
      #   working-directory: ./tag
      #   run: ls -R .
      #   shell: bash

      - uses: actions/checkout@v4
        # 引用 git tag 版本
        # with:
        #   ref: "v${{ inputs.version }}"

      - name: 开启 Node Corepack
        shell: bash
        run: corepack enable

      - name: Setup node x64
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          architecture: x64

      - name: 获取 rust toolchain
        id: toolchain
        shell: bash
        run: echo "version=$(cat ./rust-toolchain)" >> "$GITHUB_OUTPUT"

      - name: 安装 rust toolchain
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          targets: ${{ matrix.settings.target }}
          # toolchain: ${{ steps.toolchain.outputs.version }}

      # 在 Github Actions 工作流程中使用 Zig 编译器
      - uses: goto-bus-stop/setup-zig@v2
        # if: ${{ contains(matrix.settings.target,'linux') }}
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.13.0

      - name: 缓存 cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.settings.target }}-node@20-cargo-registry-trimmed

      - name: 缓存 cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ matrix.settings.target }}-node@20-cargo-index-trimmed
        if: ${{ matrix.settings.docker }}

      - name: 设置 toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash

      # 使用 x64 Node.js 安装依赖，因 为 ia32 版本将会失败，会提示 "错误:无法分配足够的内存"。
      # - name: 设置 install target x86
      #   if: matrix.settings.target == 'i686-pc-windows-msvc'
      #   run: pnpm config set supportedArchitectures.cpu "ia32"
      #   shell: bash

      - name: 安装依赖
        # 再次运行 corepack enable
        # 因为在 Windows pnpm 会使用 cmd 来运行 pnpm install。
        shell: bash
        run: |
          corepack enable
          pnpm install
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          echo '/usr/local/cargo/bin' >> $GITHUB_PATH

      # - name: 设置 node x86
      #   uses: actions/setup-node@v4
      #   if: matrix.settings.target == 'i686-pc-windows-msvc'
      #   with:
      #     node-version: 20
      #     architecture: x86

      #   build: |
      #           cargo build --release --target x86_64-apple-darwin
      #           cp ./target/release/image-compress ./tag
      #           cd ./packages && pnpm build:node-dev --target x86_64-apple-darwin &&
      #           cd ../ &&
      #           cp -r ./packages/dist/node/* ./tag
      #           chmod +x ./tag
      #           ls -R ./tag
      #           strip -x ./tag/*.node
      #   - name: 构建
      #     working-directory: .
      #     run: |
      #       mkdir tag
      #       cargo build --release --target ${{ matrix.settings.target }}
      #       echo '================ 信息 START ================'
      #       pwd
      #       ls -R
      #       echo '================  信息 END  ================'
      #     shell: bash
      # Linux
      - name: Build armv7-unknown-linux-gnueabihf
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf'  }}
        working-directory: ./packages
        run: pnpm build:node-dev --target ${{ matrix.settings.target }} --no-default-features --use-napi-cross

      - name: Build x86_64-unknown-linux-gnu in Docker
        if: ${{ matrix.settings.target == 'x86_64-unknown-linux-gnu'  }}
        uses: ./.github/actions/docker-build
        with:
          image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
          target: ${{ matrix.settings.target }}
          profile: ${{ inputs.profile }}
          pre: unset CC_x86_64_unknown_linux_gnu && unset CC # for jemallocator to compile

      - name: Build x86_64-unknown-linux-musl in Docker
        if: ${{ matrix.settings.target == 'x86_64-unknown-linux-musl'  }}
        uses: ./.github/actions/docker-build
        with:
          target: ${{ matrix.settings.target }}
          image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          profile: ${{ inputs.profile }}

      - name: Build aarch64-unknown-linux-gnu in Docker
        if: ${{ matrix.settings.target == 'aarch64-unknown-linux-gnu' }}
        uses: ./.github/actions/docker-build
        with:
          target: ${{ matrix.settings.target }}
          image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
          profile: ${{ inputs.profile }}

      - name: Build aarch64-unknown-linux-musl in Docker
        if: ${{ matrix.settings.target == 'aarch64-unknown-linux-musl'  }}
        uses: ./.github/actions/docker-build
        with:
          target: ${{ matrix.settings.target }}
          image: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          profile: ${{ inputs.profile }}


      # setup rust target for windows and macos
      - name: Setup Rust Target
        if: ${{ !contains(matrix.settings.target, 'linux') }}
        run: rustup target add ${{ matrix.settings.target }}

      # Windows
      - name: Build i686-pc-windows-msvc
        if: ${{ matrix.settings.target == 'i686-pc-windows-msvc'  }}
        working-directory: ./packages
        run: pnpm build:node-dev --target ${{ matrix.settings.target }}

      - name: Build x86_64-pc-windows-msvc
        working-directory: ./packages
        if: ${{ matrix.settings.target == 'x86_64-pc-windows-msvc'  }}
        run: pnpm build:node-dev --target ${{ matrix.settings.target }}

      - name: Build aarch64-pc-windows-msvc
        working-directory: ./packages
        shell: bash
        if: ${{ matrix.settings.target == 'aarch64-pc-windows-msvc'  }}
        run: DISABLE_PLUGIN=1 pnpm build:node-dev --target ${{ matrix.settings.target }}

      # Mac
      - name: Build x86_64-apple-darwin
        if: ${{ matrix.settings.target == 'x86_64-apple-darwin'  }}
        run: |
          cd packages && RUST_TARGET=${{ matrix.settings.target }} pnpm build:node-dev --target ${{ matrix.settings.target }}

      - name: Build aarch64-apple-darwin
        if: ${{ matrix.settings.target == 'aarch64-apple-darwin'  }}
        run: |
          if [[ "${{ startsWith(runner.name, 'GitHub Actions') }}" == "true" ]]; then
            # Github runner
            sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
          fi
          export CC=$(xcrun -f clang);
          export CXX=$(xcrun -f clang++);
          SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
          export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
          cd packages &&
          RUST_TARGET=${{ matrix.settings.target }} pnpm build:node-dev --target ${{ matrix.settings.target }}
